include:
  - remote: 'https://gitlab-templates.ddbuild.io/slack-notifier/v1/template.yml'

stages:
  - ci-image
  - build

ci-image:
  stage: ci-image
  when: manual
  except: [ tags, schedules ]
  tags: [ 'runner:docker', 'size:large' ]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  script:
    - docker build --tag 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/os-manifest:0.3 -f .ci/Dockerfile .
    - docker push 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/os-manifest:0.3

.gcloud:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/os-manifest:0.3
  tags: ['runner:main', 'size:large']
  variables:
    GCLOUD_PROJECT: datadog-build
    GCLOUD_NETWORK: datadog-build-us-east1
    GCLOUD_SUBNET: datadog-build-us-east1-private
    GCLOUD_ZONE: us-east1-b
  before_script:
    - aws ssm get-parameter --region us-east-1 --name ci.os-manifest.ci-os-manifest.json --with-decryption --query Parameter.Value --out text > /tmp/google-sa.json
    - gcloud auth activate-service-account --key-file /tmp/google-sa.json
    - rm /tmp/google-sa.json

build:
  extends: .gcloud
  stage: build
  script:
    - gcloud --project "${GCLOUD_PROJECT}" compute instances create "gitlab-ci-job-${CI_JOB_ID}" --zone "${GCLOUD_ZONE}" --tags aws-build-stable-ssh,nat-us-east1 --no-address --network "${GCLOUD_NETWORK}" --subnet "${GCLOUD_SUBNET}" --image-project debian-cloud --image-family debian-9 --service-account os-manifest-builder@datadog-build.iam.gserviceaccount.com --preemptible --machine-type n1-standard-16
    - gcloud --project "${GCLOUD_PROJECT}" beta compute scp "$(pwd)" "gitlab-ci-job-${CI_JOB_ID}:~/os-manifest" --zone "${GCLOUD_ZONE}" --recurse --internal-ip
    - gcloud --project "${GCLOUD_PROJECT}" compute ssh "gitlab-ci-job-${CI_JOB_ID}" --command "cd os-manifest && ./scripts/setup-deps.sh && ./scripts/install-sdk.sh && ./scripts/build-image.sh" --zone "${GCLOUD_ZONE}" --internal-ip
  after_script:
    - gcloud --project "${GCLOUD_PROJECT}" compute instances delete "gitlab-ci-job-${CI_JOB_ID}" --zone "${GCLOUD_ZONE}" --delete-disks=all
